{
  "openapi": "3.0.1",
  "info": {
    "version": "0.5",
    "title": "Your-pet Api docs",
    "description": "Api docs",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    { "url": "https://your-pet-backend-jfrs.onrender.com" },
    { "url": "http://localhost:8989" }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "User authorization and update endpoints"
    },
    {
      "name": "Notices",
      "description": "Notices endpoints"
    },
    {
      "name": "News",
      "description": "News endpoints"
    },
    {
      "name": "Partners",
      "description": "Partners endpoints"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "User registration",
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "409": {
            "description": "Email in use"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "User login",
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User is logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Email or password is wrong"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Get current user",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Got current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token"
          }
        }
      }
    },
    "/users/update": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update users profile",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User profile update object with at least one field",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users profile updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Empty object"
          }
        }
      }
    },
    "/users/avatars": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update users avatar",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Multipart/form-data object with avatar field for .jpg or .png file",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAvatarRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Avatar successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAvatarResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "Logout user",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successfully logout"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/notices": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get all notices, standard response: page=1, limit=10",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Got all notices, standard response: page=1, limit=10",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/components/schemas/getAllNoticesResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Notices not found"
          }
        }
      },
      "post": {
        "tags": ["Notices"],
        "summary": "Add notice",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Notice object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNoticesObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Notice created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/NoticesObject"
                }
              }
            }
          }
        }
      }
    },
    "/notices/category/{category}": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get all notices by category, standard response: page=1, limit=10",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Got all notices by category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/components/schemas/getAllNoticesResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "{category} not found"
          }
        }
      }
    },
    "/notices/{id}": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get notice by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Got notice by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/getNoticeById"
                }
              }
            }
          },
          "404": {
            "description": "{id} not found"
          },
          "404": {
            "description": "{id} invalid format"
          }
        }
      },
      "delete": {
        "tags": ["Notices"],
        "summary": "Delete notice",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notice successfully deleted"
          },
          "404": {
            "description": "{id} invalid format"
          },
          "404": {
            "description": "Notice with {id} not found"
          }
        }
      }
    },
    "/notices/find": {
      "get": {
        "tags": ["Notices"],
        "summary": "Find notice by keyword in title, standard response: page=1, limit=10",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Got notice by id, standard response: page=1, limit=10",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/getAllNoticesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Query parameter required"
          },
          "404": {
            "description": "Notices not found"
          }
        }
      }
    },
    "/notices/my/favorite/:id": {
      "patch": {
        "tags": ["Notices"],
        "summary": "Add notice to favorite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successfully added to favorite"
          },
          "400": {
            "description": "Notice already in favorite"
          },
          "404": {
            "description": "Notices not found"
          },
          "404": {
            "description": "{id} invalid format"
          }
        }
      },
      "delete": {
        "tags": ["Notices"],
        "summary": "Remove notice from favorite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successfully removed from favorite"
          },
          "400": {
            "description": "Notice not in favorite"
          },
          "404": {
            "description": "Notices not found"
          },
          "404": {
            "description": "{id} invalid format"
          }
        }
      }
    },
    "/notices/my/favorite": {
      "get": {
        "tags": ["Notices"],
        "summary": "All favorite notices of the user, standard response: page=1, limit=10",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Got all users favorite notices, standard response: page=1, limit=10",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/getAllNoticesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Favorite notices list is empty"
          }
        }
      }
    },
    "/notices/my/created": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get all notices created by user: page=1, limit=10",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Got all notices created by user: page=1, limit=10",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/getAllNoticesResponse"
                }
              }
            }
          },
          "404": {
            "description": "User did not create notices"
          },
          "404": {
            "description": "Notice not found"
          }
        }
      }
    },
    "/news": {
      "get": {
        "tags": ["News"],
        "summary": "Get all news",
        "description": "Array of news objects, standard response without page and limit parameters returns an array of 10 news items from the first page",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The number of page"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The number of items in page"
          }
        ],
        "security": [],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "Successfully loaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/components/schemas/NewsObjectResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/news/find": {
      "get": {
        "tags": ["News"],
        "summary": "Find news",
        "description": "Array of news objects found by keyword",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Keyword"
          }
        ],
        "security": [],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "Successfully loaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/components/schemas/NewsObjectResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Query parameter required"
          }
        }
      }
    },
    "/partners": {
      "get": {
        "tags": ["Partners"],
        "summary": "Get all partners",
        "description": "Array of partners objects, standard response without page and limit parameters returns an array of 10 partners items from the first page",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The number of page"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The number of items in page"
          }
        ],
        "security": [],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "Successfully loaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/components/schemas/PartnersObjectResponse"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password should have at least 1 uppercase letter, 1 lowercase letter and 1 digit!",
            "example": "Qwerty123"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        },
        "example": { "email": "1@gmail.com" }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Authorization token"
          },
          "user": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "User's id"
              },
              "name": {
                "type": "string or null",
                "description": "User's name"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "birthday": {
                "type": "string or null",
                "description": "User's birthday in iso format"
              },
              "phone": {
                "type": "string or null",
                "description": "User's phone in international format +380..."
              },
              "city": {
                "type": "string or null",
                "description": "User's city"
              },
              "avatarUrl": {
                "type": "string",
                "description": "User's avatar url"
              },
              "verify": {
                "type": "boolean",
                "description": "Email verification"
              },
              "pets": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Pet's object",
                  "properties": {}
                },
                "description": "User's pets"
              },
              "notices": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Notice object",
                  "properties": {}
                },
                "description": "User's notices"
              },
              "favorite": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "User's favorite notices",
                  "properties": {}
                },
                "description": "User's notices"
              }
            }
          }
        },
        "example": {
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDVkNDE5MWM3YzUzZWIwMmZhYzQxMGMiLCJuYW1lIjpudWxsLCJlbWFpbCI6Im1hZG5lenp6NUBnbWFpbC5jb20iLCJiaXJ0aGRheSI6bnVsbCwicGhvbmUiOm51bGwsImNpdHkiOm51bGwsImF2YXRhclVybCI6Ii8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIvZWFjNTQxYmQ4ZDJkOGI0MWRhNzhmYmRlZTBiMWNmMjQiLCJ2ZXJpZnkiOmZhbHNlLCJpYXQiOjE2ODM4MzYzNDcsImV4cCI6MTY4MzkxOTE0N30.a0O_jKSHq_3wbEzsx8iVKdEKCEhyBg21KJXTRYokNiQ",
          "user": {
            "_id": "645d4191c7c53eb02fac410c",
            "name": null,
            "email": "madnezzz5@gmail.com",
            "birthday": null,
            "phone": null,
            "city": null,
            "avatarUrl": "//www.gravatar.com/avatar/eac541bd8d2d8b41da78fbdee0b1cf24",
            "verify": false,
            "pets": ["645d4191c7c53eb02fac410c", "645d4191c7c53eb02fac410c"],
            "notices": ["645d4191c7c53eb02fac410c", "645d4191c7c53eb02fac410c"],
            "favorite": ["645d4191c7c53eb02fac410c", "645d4191c7c53eb02fac410c"]
          }
        }
      },
      "CurrentResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's id"
          },
          "name": {
            "type": "string or null",
            "description": "User's name"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "birthday": {
            "type": "string or null",
            "description": "User's birthday in iso format"
          },
          "phone": {
            "type": "string or null",
            "description": "User's phone in international format +380..."
          },
          "city": {
            "type": "string or null",
            "description": "User's city"
          },
          "avatarUrl": {
            "type": "string",
            "description": "User's avatar url"
          },
          "verify": {
            "type": "boolean",
            "description": "Email verification"
          },
          "pets": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Pet's object",
              "properties": {}
            },
            "description": "User's pets"
          },
          "notices": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Notice object",
              "properties": {}
            },
            "description": "User's notices"
          },
          "favorite": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Notice object",
              "properties": {}
            },
            "description": "User's favorite notices"
          }
        },
        "example": {
          "_id": "645d579dfedbaba1c5473ef2",
          "name": "Some name",
          "email": "some-mail@mail.com",
          "birthday": "2011-10-05T14:48:00.000Z",
          "phone": "+380123456789",
          "city": "Melitopol",
          "avatarUrl": "//www.gravatar.com/avatar/eac541bd8d2d8b41da78fbdee0b1cf24",
          "verify": false,
          "pets": ["645d4191c7c53eb02fac410c", "645d4191c7c53eb02fac410c"],
          "notices": ["645d4191c7c53eb02fac410c", "645d4191c7c53eb02fac410c"],
          "favorite": ["645d4191c7c53eb02fac410c", "645d4191c7c53eb02fac410c"]
        }
      },
      "UpdateRequest": {
        "type": "object",
        "required": ["somePropertie"],
        "properties": {
          "somePropertie": {
            "type": "propertie type",
            "description": "Propertie to change"
          }
        },
        "example": {
          "name": "Some name"
        }
      },
      "UpdateAvatarRequest": {
        "required": true,
        "properties": {
          "avatar": {
            "type": "string",
            "format": "binary"
          }
        },
        "example": {
          "avatar": "some-file.jpg"
        }
      },
      "UpdateAvatarResponse": {
        "properties": {
          "avatarUrl": {
            "type": "string",
            "description": "Image link"
          },
          "message": {
            "type": "string",
            "description": "Avatar successfully updated"
          }
        },
        "example": {
          "avatarUrl": "https://res.cloudinary.com/dqejymgnk/image/upload/v1683897828/avatar/645e24c526c08528afa6d247_photo_2023-01-29_14-06-46.jpg.jpg",
          "message": "Avatar successfully changed"
        }
      },
      "NoticesObject": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Mongodb objectId"
          },
          "category": {
            "type": "string enum",
            "description": "one of the three category: sell, lostFound, inGoodHands"
          },
          "title": {
            "type": "string",
            "description": "Title of the notice"
          },
          "name": {
            "type": "string",
            "description": "Pets name"
          },
          "birthday": {
            "type": "string (date in iso format)",
            "description": "Pets birthday"
          },
          "breed": {
            "type": "string",
            "description": "Pets breed"
          },
          "sex": {
            "type": "string enum",
            "description": "female, male"
          },
          "location": {
            "type": "string",
            "description": "City"
          },
          "price": {
            "type": "integer",
            "description": "Price"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "img": {
            "type": "string",
            "description": "Image url"
          },
          "owner": {
            "type": "string",
            "description": "Owners Id"
          }
        },
        "example": {
          "_id": "6462647aae7c50c2bae9345b",
          "category": "inGoodHands",
          "title": "Sell stets doggy",
          "name": "Pitsburg",
          "birthday": "2019-02-13",
          "breed": "Bulldog",
          "sex": "male",
          "location": "stets",
          "price": 2333330,
          "comment": "stets stets, like stets play stets stets stets",
          "img": "http://img/dogs/bulldog",
          "owner": "6462610994b8883816790126"
        }
      },
      "AddNoticesObject": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string enum",
            "description": "one of the three category: sell, lostFound, inGoodHands"
          },
          "title": {
            "type": "string",
            "description": "Title of the notice"
          },
          "name": {
            "type": "string",
            "description": "Pets name"
          },
          "birthday": {
            "type": "string (date in iso format)",
            "description": "Pets birthday"
          },
          "breed": {
            "type": "string",
            "description": "Pets breed"
          },
          "sex": {
            "type": "string enum",
            "description": "female, male"
          },
          "location": {
            "type": "string",
            "description": "City"
          },
          "price": {
            "type": "integer",
            "description": "Price"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "noticeImage": {
            "type": "string",
            "description": "Image url"
          },
          "owner": {
            "type": "string",
            "description": "Owners Id"
          }
        },
        "example": {
          "category": "inGoodHands",
          "title": "Sell stets doggy",
          "name": "Pitsburg",
          "birthday": "2019-02-13",
          "breed": "Bulldog",
          "sex": "male",
          "location": "stets",
          "price": 2333330,
          "comment": "stets stets, like stets play stets stets stets",
          "noticeImage": "http://img/dogs/bulldog",
          "owner": "6462610994b8883816790126"
        }
      },
      "getAllNoticesResponse": {
        "type": "array",
        "description": "array of notices objects",
        "items": {
          "type": "object",
          "description": "Notice object",
          "$ref": "#/components/schemas/NoticesObject"
        },
        "example": [
          {
            "_id": "6462647aae7c50c2bae9345b",
            "category": "inGoodHands",
            "title": "Sell stets doggy",
            "name": "Pitsburg",
            "birthday": "10/10/1000",
            "breed": "Bulldog",
            "sex": "male",
            "location": "stets",
            "price": 2333330,
            "comment": "stets stets, like stets play stets stets stets",
            "favorite": [
              "6462647aae7c50c2bae9345b",
              "6462647aae7c50c2bae9345b"
            ],
            "img": "http://img/dogs/bulldog",
            "owner": "6462610994b8883816790126"
          },
          {
            "_id": "64626482ae7c50c2bae9345e",
            "category": "sell",
            "title": "Sell stets doggy",
            "name": "Pitsburg",
            "birthday": "10/10/1000",
            "breed": "Bulldog",
            "sex": "male",
            "location": "stets",
            "price": 2333330,
            "comment": "stets stets, like stets play stets stets stets",
            "favorite": [
              "6462647aae7c50c2bae9345b",
              "6462647aae7c50c2bae9345b"
            ],
            "img": "http://img/dogs/bulldog",
            "owner": "6462610994b8883816790126"
          }
        ]
      },
      "getNoticeById": {
        "type": "object",
        "description": "Notice object",
        "$ref": "#/components/schemas/NoticesObject",
        "example": {
          "_id": "64626491ae7c50c2bae93464",
          "category": "inGoodHands",
          "title": "Sell stets doggy",
          "name": "Pitsburg",
          "birthday": "10/10/1000",
          "breed": "Bulldog",
          "sex": "male",
          "location": "stets",
          "price": 2333330,
          "comment": "stets stets, like stets play stets stets stets",
          "favorite": ["6462647aae7c50c2bae9345b", "6462647aae7c50c2bae9345b"],
          "img": "http://img/dogs/bulldog",
          "owner": "6462610994b8883816790126"
        }
      },
      "NewsObjectResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Mongodb objectId"
          },
          "imgUrl": {
            "type": "string",
            "description": "Image url"
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "text": {
            "type": "string",
            "description": "Text"
          },
          "date": {
            "type": "string",
            "description": "Date in ISO format"
          },
          "url": {
            "type": "string",
            "description": "News url"
          },
          "id": {
            "type": "string",
            "description": "News id"
          }
        },
        "example": [
          {
            "_id": "646142e97309f6c6b8c059bc",
            "imgUrl": "https://www.nytimes.com/images/2023/04/16/magazine/16mag-LOR/16mag-LOR-blog480.jpg",
            "title": "What I Learned Dogsitting for New York City’s Opulent Elite",
            "text": "In a city of yawning class inequality, some side hustles let you glimpse how the other half lives.",
            "date": "2023-04-11T09:00:18+0000",
            "url": "https://www.nytimes.com/2023/04/11/magazine/dogsitting-rich-new-york.html",
            "id": "nyt://article/8d29f1fc-d146-509d-8ceb-5a5b17d7886b"
          },
          {
            "_id": "646142e97309f6c6b8c059bd",
            "imgUrl": "https://www.nytimes.com/images/2023/04/04/multimedia/00VIRTUAL-VETS-01b-fmzk/00VIRTUAL-VETS-01b-fmzk-blog480.jpg",
            "title": "The Virtual Vet Will See You Meow",
            "text": "Veterinary telemedicine could help more pet owners access much-needed care and put anxious animals at ease, but challenges remain.",
            "date": "2023-04-07T09:00:46+0000",
            "url": "https://www.nytimes.com/2023/04/07/health/vet-pet-health-telemedicine.html",
            "id": "nyt://article/992f2f7f-793c-5553-b722-348625f53a4b"
          }
        ]
      },
      "PartnersObjectResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Mongodb objectId"
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "url": {
            "type": "string",
            "description": "Partner website url"
          },
          "addressUrl": {
            "type": "string",
            "description": "Partner adress aurl on google maps"
          },
          "imageUrl": {
            "type": "string",
            "description": "Image url"
          },
          "address": {
            "type": "string",
            "description": "Text"
          },
          "workDays": {
            "type": "array",
            "description": "array of 7 business days objects",
            "items": {
              "type": "object",
              "description": "Day object",
              "properties": {
                "isOpen": {
                  "type": "boolean",
                  "description": "open or not"
                },
                "from": {
                  "type": "string",
                  "description": "opening time"
                },
                "to": {
                  "type": "string",
                  "description": "closing time"
                }
              }
            }
          }
        },
        "example": [
          {
            "_id": "64614d436eecd7dcfdc69923",
            "title": "Притулок для бездомних тварин 'Сіріус'",
            "url": "https://dogcat.com.ua",
            "addressUrl": "https://goo.gl/maps/iq8NXEUf31EAQCzc6",
            "imageUrl": "https://storage.googleapis.com/kidslikev2_bucket/pets-support/images/sponsors/frame_287.png",
            "address": "Fedorivka, Kyiv Oblast, Ukraine, 07372",
            "workDays": [
              {
                "_id": "64621abc4fee37c4fb1956b0",
                "isOpen": false
              },
              {
                "_id": "64621abc4fee37c4fb1956b1",
                "isOpen": false
              },
              {
                "_id": "64621abc4fee37c4fb1956b2",
                "isOpen": false
              },
              {
                "_id": "64621abc4fee37c4fb1956b3",
                "isOpen": false
              },
              {
                "_id": "64621abc4fee37c4fb1956b4",
                "isOpen": false
              },
              {
                "_id": "64621abc4fee37c4fb1956b5",
                "isOpen": true,
                "from": "11:00",
                "to": "16:00"
              },
              {
                "_id": "64621abc4fee37c4fb1956b6",
                "isOpen": true,
                "from": "11:00",
                "to": "16:00"
              }
            ],
            "phone": "+380931934069",
            "email": null
          },
          {
            "_id": "64614d436eecd7dcfdc69924",
            "title": "Happy Paw",
            "url": "https://happypaw.ua/ua",
            "addressUrl": "https://goo.gl/maps/3RyzTYBvMr9WQWCC6",
            "imageUrl": "https://storage.googleapis.com/kidslikev2_bucket/pets-support/images/sponsors/frame_288.png",
            "address": "Київ, вулиця Шота Руставелі, 44 (3-й поверх, офіс 7)",
            "workDays": [
              {
                "_id": "64621abc4fee37c4fb1956b7",
                "isOpen": true,
                "from": "09:00",
                "to": "17:00"
              },
              {
                "_id": "64621abc4fee37c4fb1956b8",
                "isOpen": true,
                "from": "09:00",
                "to": "17:00"
              },
              {
                "_id": "64621abc4fee37c4fb1956b9",
                "isOpen": true,
                "from": "09:00",
                "to": "17:00"
              },
              {
                "_id": "64621abc4fee37c4fb1956ba",
                "isOpen": true,
                "from": "09:00",
                "to": "17:00"
              },
              {
                "_id": "64621abc4fee37c4fb1956bb",
                "isOpen": true,
                "from": "09:00",
                "to": "17:00"
              },
              {
                "_id": "64621abc4fee37c4fb1956bc",
                "isOpen": true,
                "from": "09:00",
                "to": "17:00"
              },
              {
                "_id": "64621abc4fee37c4fb1956bd",
                "isOpen": true,
                "from": "09:00",
                "to": "17:00"
              }
            ],
            "phone": "+380442900329",
            "email": "hello@happypaw.ua"
          }
        ]
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
